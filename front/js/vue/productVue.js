import GlobalCtrl from "../controller/globalCtrl.js";
export default class ProductVue {
// Cr√©e une nouvelle instance de la classe import√©e GlobalCtrl afin de pouvoir en appeler des m√©thodes :
    globalController = new GlobalCtrl();

    /**
     * Affiche plusieurs √©l√©ments dans le DOM afin de voir clairement les d√©tails de chaque produit.
     * @param { Object } product Comme la m√©thode sera appel√©e depuis le controleur (lui-m√™me reli√© au mod√®le), {product} sera la liste des produits li√©s √† leur Id r√©cup√©r√©e dans l'API...
     */
    showProductDetail(product) {

    // Ajuste le titre de la page avec le nom du produit :
        document.title = product.name;
    // Cible l'endroit o√π on veut commencer notre ajout :
        const itemImg = document.querySelector(".item__img");
    // Ins√®re une <image> √† l'int√©rieur de notre balise HTML en lui d√©finissant les attributs "src" et "alt" : 
        const image = document.createElement("img");
        image.setAttribute("src", product.imageUrl);
        image.setAttribute("alt", product.altTxt);
        itemImg.appendChild(image);
    // Cible l'endroit o√π on veut ins√©rer le titre :
        const title = document.querySelector("#title");
        title.textContent = product.name;
    // Cible l'endroit o√π on veut ins√©rer le prix :
        const price = document.querySelector("#price");
        price.textContent = product.price;
    // Cible l'endroit o√π on veut ins√©rer la description du produit :
        const description = document.querySelector("#description");
        description.textContent = product.description;
    // Cible l'endroit o√π on veut ins√©rer les couleurs disponibles pour chaque produit :
        const colors = document.querySelector("#colors");
        for (let i=0; i < product.colors.length; i++) {
        // Ins√®re un √©l√©ment <option> et parcourt les couleurs disponibles pour chaque produit afin de les incr√©menter :
            let color = document.createElement("option");
            color.setAttribute("value", product.colors[i]);
            color.textContent = product.colors[i];
            colors.appendChild(color);
        }
    // Initie la m√©thode suivante pour qu'elle s'applique √† la fin de celle-ci sans avoir √† l'appeler depuis le controleur :
        this.saveProductInBasket(product);
    };

    /**
     * Initie une √©coute au clic d'un bouton afin de r√©cup√©rer le produit √† stocker dans le panier.
     * @param { Object } product 
     */
    saveProductInBasket(product) { 
    
    // Cible l'endroit o√π placer l'√©coute :
        const btn_addToCart = document.querySelector("#addToCart");
        btn_addToCart.addEventListener("click", ()=>{
        // Initie les valeurs √† r√©cup√©rer sur le DOM :
            const colors = document.querySelector("#colors");
            const colorChoice = colors.value;
            const qttyRequired = document.querySelector("#quantity");
            const qttyChoice = qttyRequired.value;
        // D√©clare un objet JSON √† enregistrer dans le panier avec les donn√©es souhait√©es :
            let productToSave = {
                productId : product._id,
                productColor : colorChoice,
                productQtty : qttyChoice, 
                productName : product.name,
                productImgUrl : product.imageUrl,
                productAltTxt : product.altTxt            
            };
            if (this.globalController.verifiyCartConditions(productToSave) == 0) {
                alert("Merci de v√©rifier les options (couleur et/ou quantit√©) üôá‚Äç‚ôÄÔ∏è");
            } else {
                this.globalController.saveCartInStorage(productToSave);
            }
        });
    };
};